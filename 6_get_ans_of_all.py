import pandas as pd
import os
import glob
from multiprocessing import Pool
import urllib.parse

input_folder = 'Datasets/pre_ans_sorted_graph'
graph_folder = os.path.join(input_folder, 'graphs')
output_folder = 'Datasets/ans_all'
os.makedirs(output_folder, exist_ok=True)
html_folder = os.path.join(output_folder, 'html_files')
os.makedirs(html_folder, exist_ok=True)

key_columns = ['name', 'item_type', 'item_form', 'prescription', 'manufacturer', 'country']

def process_file(file_path):
    try:
        competitor_name = os.path.splitext(os.path.basename(file_path))[0].split('diff_')[-1]
        df = pd.read_excel(file_path)

        required_columns = key_columns + ['–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞', '–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π', '–°–µ–≥–º–µ–Ω—Ç—ã',
                                          '–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∏–Ω—É—Å', '–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ HTML']
        missing = [col for col in required_columns if col not in df.columns]
        if missing:
            print(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏ –≤ {file_path}: {missing}")
            return pd.DataFrame()

        df['–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫'] = df['–ù–∞–∑–≤–∞–Ω–∏–µ HTML'].apply(
            lambda x: os.path.abspath(os.path.join(graph_folder, str(x).strip())) if pd.notna(x) else ''
        )

        grouped = df.groupby(key_columns).agg({
            '–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞': 'median',
            '–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π': 'sum',
            '–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∏–Ω—É—Å': 'sum',
            '–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏': 'sum',
            '–°–µ–≥–º–µ–Ω—Ç—ã': lambda x: ';'.join(set(x.dropna().astype(str))),
            '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫': 'first'
        }).reset_index()

        grouped['–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞'] = grouped.apply(
            lambda row: (
                f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {competitor_name}; "
                f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {row['–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞']:.2f}; "
                f"–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π: {row['–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π']}; "
                f"–°–µ–≥–º–µ–Ω—Ç—ã: {row['–°–µ–≥–º–µ–Ω—Ç—ã']}; "
                f"–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∏–Ω—É—Å: {row['–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∏–Ω—É—Å']}; "
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {row['–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏']}"
            ),
            axis=1
        )

        grouped['–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞'] = competitor_name
        grouped['–ö–∞–∫ —á–∞—Å—Ç–æ –≤ –∞–ø—Ç–µ–∫–∞—Ö'] = 1
        return grouped

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ {file_path}: {str(e)}")
        return pd.DataFrame()

excel_files = glob.glob(os.path.join(input_folder, '*.xlsx'))
with Pool() as pool:
    data_frames = [df for df in pool.map(process_file, excel_files) if not df.empty]

if not data_frames:
    print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    exit()

combined_df = pd.concat(data_frames, ignore_index=True)
final_df = combined_df.groupby(key_columns).agg({
    '–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞': 'mean',
    '–ò–Ω–¥–µ–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π': 'sum',
    '–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–∏–Ω—É—Å': 'sum',
    '–ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏': 'sum',
    '–ö–∞–∫ —á–∞—Å—Ç–æ –≤ –∞–ø—Ç–µ–∫–∞—Ö': 'sum',
    '–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞': list,
    '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞': lambda x: list(set(x)),
    '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫': list
}).reset_index()

def create_html_file(row, index):
    try:
        html_content = '''<html><head><meta charset="UTF-8"><style>
            body{font-family:Arial}.competitor{margin-bottom:20px;padding:15px;border:1px solid #ddd}
            .open-button{padding:10px 20px;background:#3498DB;color:#fff;border-radius:4px;text-decoration:none}
            .open-button:hover{background:#2980B9}</style></head><body><h2>–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</h2>'''

        for data, graph_path in zip(row['–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞'], row['–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫']):
            html_content += '<div class="competitor">'
            lines = data.replace('; ', '\n').split('\n')

            for line in lines:
                if ': ' in line:
                    key, value = line.split(': ', 1)
                    if key == "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞":
                        html_content += f'<div style="font-weight:bold;font-size:20px">{value}</div>'
                    else:
                        html_content += f'<p><b>{key}:</b> {value}</p>'

            if pd.notna(graph_path) and os.path.exists(graph_path):
                abs_path = os.path.abspath(graph_path)
                encoded_path = urllib.parse.quote(abs_path)
                file_uri = f'file:///{encoded_path}'
                html_content += f'<a href="{file_uri}" class="open-button" target="_blank">üìà –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫</a>'
            else:
                html_content += f'<p style="color:red">–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Path: {graph_path})</p>'

            html_content += '</div>'

        html_content += '</body></html>'
        html_path = os.path.join(html_folder, f'competitor_data_{index}.html')
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        return os.path.relpath(html_path, start=output_folder)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ HTML –¥–ª—è –∑–∞–ø–∏—Å–∏ {index}: {str(e)}")
        return ''

final_df['–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ'] = final_df.apply(lambda row: create_html_file(row, row.name), axis=1)
final_df['–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ'] = final_df['–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ'].apply(
    lambda p: f'=HYPERLINK("{p.replace("\\\\", "/")}", "üìä –î–∞–Ω–Ω—ã–µ")' if p else '')

output_file = os.path.join(output_folder, 'ans_all.xlsx')
final_df.to_excel(output_file, index=False, engine='openpyxl')
print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}\n–°–æ–∑–¥–∞–Ω–æ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü: {len(final_df)}")
